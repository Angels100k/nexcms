"use server"
interface ComponentProps {
[key: string]: any;
}

interface PageProps {
jsonData: any;
themeName?: string;
}

type ComponentTypeWithProps = React.ComponentType<ComponentProps> | null;
interface ComponentsMap {
[componentName: string]: ComponentTypeWithProps;
}

// pages/pagebuilder.tsx
import { GetServerSideProps, NextPage } from 'next';
import React from 'react';
import path from 'path';

const PageBuilder: NextPage<PageProps>  =  async ({ themeName, jsonData }) => {
  const componentsMap: ComponentsMap = {};

  for (const key of Object.keys(jsonData)) {
    const componentPath = `@/theme/${themeName}/component/${key}`;

    // Use the dynamic import() function
    import(componentPath).then(module => {
        console.log("here")
        componentsMap[key] = module.default || module;
    }).catch(error => {
        console.error(`Failed to load component ${key}`, error);
        componentsMap[key] = null;
    });
}


  return (
    <main>
      {Object.entries(jsonData).map(([key, value]) => {
        const Component = componentsMap?.[key] || null;
        return (
          <section key={key}>
            {Component ? <Component {...value as React.ComponentProps<any>} /> : <p>Component not found for {key}</p>}
          </section>
        );
      })}
    </main>
  );
};
export default PageBuilder;
